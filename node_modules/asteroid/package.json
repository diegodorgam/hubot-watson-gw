{
  "_args": [
    [
      {
        "raw": "asteroid@git+https://github.com/RocketChat/asteroid.git",
        "scope": null,
        "escapedName": "asteroid",
        "name": "asteroid",
        "rawSpec": "git+https://github.com/RocketChat/asteroid.git",
        "spec": "git+https://github.com/RocketChat/asteroid.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:RocketChat/asteroid.git",
          "sshUrl": "git+ssh://git@github.com/RocketChat/asteroid.git",
          "httpsUrl": "git+https://github.com/RocketChat/asteroid.git",
          "gitUrl": "git://github.com/RocketChat/asteroid.git",
          "shortcut": "github:RocketChat/asteroid",
          "directUrl": "https://raw.githubusercontent.com/RocketChat/asteroid/master/package.json"
        }
      },
      "/Users/diegoaguilera/www/hubot-watson/node_modules/hubot-rocketchat"
    ]
  ],
  "_from": "git+https://github.com/RocketChat/asteroid.git",
  "_id": "asteroid@0.6.1",
  "_inCache": true,
  "_location": "/asteroid",
  "_phantomChildren": {},
  "_requested": {
    "raw": "asteroid@git+https://github.com/RocketChat/asteroid.git",
    "scope": null,
    "escapedName": "asteroid",
    "name": "asteroid",
    "rawSpec": "git+https://github.com/RocketChat/asteroid.git",
    "spec": "git+https://github.com/RocketChat/asteroid.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:RocketChat/asteroid.git",
      "sshUrl": "git+ssh://git@github.com/RocketChat/asteroid.git",
      "httpsUrl": "git+https://github.com/RocketChat/asteroid.git",
      "gitUrl": "git://github.com/RocketChat/asteroid.git",
      "shortcut": "github:RocketChat/asteroid",
      "directUrl": "https://raw.githubusercontent.com/RocketChat/asteroid/master/package.json"
    }
  },
  "_requiredBy": [
    "/hubot-rocketchat"
  ],
  "_resolved": "git+https://github.com/RocketChat/asteroid.git#a76a53254e381f9487aa2a9be3d874c9a2df6552",
  "_shasum": "4baca7ac1fe505502fdf256476addbf79ae813c6",
  "_shrinkwrap": null,
  "_spec": "asteroid@git+https://github.com/RocketChat/asteroid.git",
  "_where": "/Users/diegoaguilera/www/hubot-watson/node_modules/hubot-rocketchat",
  "author": {
    "name": "Paolo Scanferla",
    "email": "paolo.scanferla@mondora.com",
    "url": "https://github.com/mondora"
  },
  "bugs": {
    "url": "https://github.com/mondora/asteroid/issues"
  },
  "dependencies": {
    "ddp.js": "^0.5.0",
    "faye-websocket": "^0.11.0",
    "q": "^1.0.1"
  },
  "description": "Aletrnative Meteor client",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "faye-websocket": "^0.11.0",
    "gulp": "^3.8.8",
    "gulp-concat": "^2.4.1",
    "istanbul": "^0.3.2",
    "lodash": "^2.4.1",
    "mkdirp": "^0.5.0",
    "mocha": "git+https://github.com/visionmedia/mocha.git",
    "mocha-lcov-reporter": "0.0.1",
    "node-static": "^0.7.6",
    "q": "^1.0.1",
    "rewire": "^2.1.0",
    "should": "^4.0.4",
    "sinon": "^1.10.3"
  },
  "gitHead": "a76a53254e381f9487aa2a9be3d874c9a2df6552",
  "homepage": "https://github.com/mondora/asteroid",
  "keywords": [
    "ddp",
    "asteroid",
    "meteor"
  ],
  "license": "MIT",
  "main": "dist/asteroid.node.js",
  "name": "asteroid",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/mondora/asteroid.svg?branch=master)](https://travis-ci.org/mondora/asteroid)\n[![Coverage Status](https://coveralls.io/repos/mondora/asteroid/badge.png)](https://coveralls.io/r/mondora/asteroid)\n\n[Example todo app using AngularJS.](http://mondora.github.io/meteor-todo)\n[Same app using Meteor's front-end.](http://meteor.todo.pscanf.com)\n\n#asteroid\n\nA javascript client (browser and node) for a Meteor backend.\n\n##Table of contents\n\n[Why](#why)\n\n[Install](#install)\n\n[Example usage](#example-usage)\n\n[Advantages over the canonical Meteor front-end](#advantages-over-the-canonical-meteor-front-end)\n\n[Build asteroid locally](#build-asteroid-locally)\n\n[Contribute](#contribute)\n\n[API](#api)\n\n##Why\n\nMeteor is an awesome platform, but its canonical\nfront-end is not very flexible. Asteroid gives the\npossibility to connect to a Meteor backend with any JS app.\n\nSome of the things Asteroid allows you to do are:\n\n*\tmake any existing application reactive\n\n*\tuse any front-end framework you want with Meteor\n\n*\tdevelop browser extensions backed by Meteor\n\n[Blog post on the library](http://mondora.com/#!/post/e2da7bd7ccb774de13324488b4e24abd)\n\n##Install\n\n###In the browser\n\nFirst, dowload the library:\n\n    bower install asteroid\n\nThen, add the necessary libraries to your `index.html`:\n\n    <script src=\"bower_components/ddp.js/src/ddp.js\"></script>\n    <script src=\"bower_components/q/q.js\"></script>\n    <script src=\"bower_components/asteroid/dist/asteroid.browser.js\"></script>\n    \nIf you want to login via oauth providers (facebook, google etc),\nalso include the appropriate plugin:\n\n    <script src=\"bower_components/asteroid/dist/plugins/facebook-login.js\"></script>\n\nFor facebook connect support in cordova via the [facebook connect plugin](https://github.com/Wizcorp/phonegap-facebook-plugin),\nsee https://github.com/keyvanfatehi/asteroid-facebook-connect\n    \n###In a chrome extension or in cordova\n\nJust replace `asteroid.browser.js` with `asteroid.chrome.js` or `asteroid.cordova.js`.\n\nIf using from within a chrome extension make sure to request for the `tabs` and `storage` permissions in your extensions manifest file.\n\n###In node\n\nDownload the package:\n\n    npm install asteroid\n\nRequire it in your project:\n\n    var Asteroid = require(\"asteroid\");\n\n##Example usage\n\n```javascript\n// Connect to a Meteor backend\nvar ceres = new Asteroid(\"localhost:3000\");\n\n// Use real-time collections\nceres.subscribe(\"tasksPublication\");\nvar tasks = ceres.getCollection(\"tasks\");\ntasks.insert({\n  description: \"Do the laundry\"\n});\n// Get the task\nvar laundryTaskRQ = tasks.reactiveQuery({description: \"Do the laundry\"});\n// Log the array of results\nconsole.log(laundryTaskRQ.result);\n// Listen for changes\nlaundryTaskRQ.on(\"change\", function () {\n  console.log(laundryTaskRQ.result);\n});\n\n// Login your user\nceres.loginWithTwitter();\n\n// Call method and use promises via the Q library\nvar ret = ceres.call('newUser');\n\nret.result\n  .then(function (result) {\n  console.log('Success:', result);\n}).catch(function (error) {\n  console.error('Error:', error);\n});\n```\n\nPlease refer to the [Q documentation](https://github.com/kriskowal/q) for more information about handling promises.\n\n##Advantages over the canonical Meteor front-end\n\n* Small footprint.\n\n* Framework agnostic. Use the tools you already know and\n  love to build your app.\n\n* Allows to use Meteor as a full-blown backend or just as a\n  real-time platform pluggable into any existing project.\n\n* Easily connect to multiple Meteor servers at the same\n  time, perfect for building admin interfaces.\n\n \n##Build asteroid locally\n\nClone the repository (or your fork) on your computer.\n\n    git clone https://github.com/mondora/asteroid\n\nEnter the project's directory and install the required\ndependencies:\n\n    cd asteroid/\n    npm install\n\nStart the development environment (requires `gulp` installed globally):\n\n    gulp\n\nVisit `localhost:8080/browser.html` and `localhost:8080/node.html`\nfor unit tests result.\n\n\n##Contribute\n\nContributions are as always very very welcome. If you\nwant to help but don't know how to get started,\n[feel free to schedule a pair programming session with me!](http://mondora.com/#!/post/4ddde81d13b2152ab068b54e85bd4a2a)\n\n\n\n##API\n\n\n\n##Asteroid methods\n\n\n\n###new Asteroid(host, ssl, interceptor)\n\nCreates a new Asteroid instance, that is, a connection to a\nMeteor server (via DDP).\n\nAfter being constructed, the instance will connect itself to\nthe Meteor backend. It will also try, upon connection, to\nresume a previous login session (with a token saved in\nlocalstorage). The `Asteroid.resumeLoginPromise` property\nstores a promise which will be resolved if the resume was\nsuccessful, rejected otherwise.\n\nIf `SockJS` is defined, it will be used as the socket\ntransport. Otherwise `WebSocket` will be used. Note that\n`SockJS` is required for IE9 support.\n\n#####Arguments\n\n* `host` **string** _required_: the address of the Meteor\n  server, e.g. `example.meteor.com`\n\n* `ssl` **boolean** _optional_: whether to use SSL. Defaults\n  to `false`.\n\n* `interceptor` **function** _optional_: a function which\n  will intercept any socket event. It will be called with an\n  event object containing the name of the event, the\n  timestamp of the event, and details about the event (for\n  instance, in case of a \"socket_message_received\" event,\n  it'll contain the payload of the message).\n\n#####Returns\n\nAn Asteroid instance.\n\n------------------------------------------------------------\n\n###Asteroid.on(event, handler)\n\nRegisters an event handler for the specified event.\n\n#####Arguments\n\n* `event` **string** _required_: the name of the event.\n\n* `handler` **function** _required_: the handler.\n\nAn Asteroid instance emits the following events:\n\n* `connected`: emitted when the DDP connection is\n  established. No arguments are passed to the handler.\n\n* `login`: emitted when the user logs in. The id of the\n  logged in user will be passed as argument to the handler.\n\n* `logout`: emitted when the user logs out. No arguments are\n  passed to the handler.\n\n#####Returns\n\nNothing\n\n------------------------------------------------------------\n\n###Asteroid.loginWith ... ()\n\nLogs the user in via the specified third party (oauth)\nservice.\n\n#####Available services\n\n* **facebook**: `loginWithFacebook`\n\n* **google**: `loginWithGoogle`\n\n* **twitter**: `loginWithTwitter`\n\n* **github**: `loginWithGithub`\n\n#####Returns\n\nA promise which will be resolved with the logged user id if\nthe login is successful. Otherwise it'll be rejected with\nthe error.\n\n------------------------------------------------------------\n\n###Asteroid.createUser(usernameOrEmail, password, profile)\n\nCreates a user and logs him in. **Does not** hash the\npassword before sending it to the server. This is not a\nproblem, since you'll probably be using SSL anyway.\n\n#####Arguments\n\n* `usernameOrEmail` **string** _required_: the username or\n  email.\n\n* `password` **string** _required_: the password.\n\n* `profile` **object** _optional_: a blackbox, you can throw\n  anything in here and it'll end up into `user.profile`.\n\n#####Returns\n\nA promise which will be resolved with the logged user id if\nthe creation and login are successful. Otherwise it'll be\nrejected with an error.\n\n------------------------------------------------------------\n\n###Asteroid.loginWithPassword(usernameOrEmail, password)\n\nLogs the user in username/email and password. **Does not**\nhash the password before sending it to the server. This is\nnot a problem, since you'll probably be using SSL anyway.\n\n#####Arguments\n\n* `usernameOrEmail` **string** _required_: the username or\n  email.\n\n* `password` **string** _required_: the password.\n\n#####Returns\n\nA promise which will be resolved with the logged user id if\nthe login is successful. Otherwise it'll be rejected with\nan error.\n\n------------------------------------------------------------\n\n###Asteroid.logout()\n\nLogs out the user.\n\n#####Arguments\n\nNone\n\n#####Returns\n\nA promise which will be resolved with if the logout is\nsuccessful. Otherwise it'll be rejected with the error.\n\n------------------------------------------------------------\n###Asteroid.subscribe(name, [param1, param2, ...])\n\nSubscribes to the specified subscription. If an identical\nsubscription (same name and parameters) has already been\nmade, Asteroid will return that subscription.\n\n#####Arguments\n\n* `name` **string** _required_: the name of the subscription.\n\n* `param1, param2, ...` _optional_: a list of parameters\n  that will be passed to the publish function on the server.\n\n#####Returns\n\nA subscription instance.\n\n------------------------------------------------------------\n\n###Asteroid.Subscription\n\nSubscription instances have the following properties:\n\n* `id` **string**: the `id` of the subscription, as\n  returned by the `ddp.sub` method\n\n* `ready` **promise**: a promise which will be resolved with\n  the `id` of the subscription if the subscription succeeds\n  (we receive the ddp `ready` message), or will be rejected\n  if it fails (we receive, upon subscribing, the `nosub`\n  message).\n\nAnd the following method:\n\n* `stop`: it takes no argument, sends the ddp `unsub`\n  message and deletes the subscription so it can be garbage\n  collected.\n\n------------------------------------------------------------\n\n###Asteroid.call(method, [param1, param2, ...])\n\nCalls a server-side method with the specified arguments.\n\n#####Arguments\n\n* `method` **string** _required_: the name of the method to\n  call.\n\n* `param1, param2, ...` _optional_: a list of parameters\n  that will be passed to the method on the server.\n\n#####Returns\n\nAn object with two properties: `result` and `updated`. Both\nproperties are promises.\n\nIf the method is successful, the `result` promise will be\nresolved with the return value passed by the server. The\n`updated` promise will be resolved with nothing once the\nserver emits the `updated` message, that tells the client\nthat any side-effect that the method execution caused on the\ndatabase has been reflected on the client (for example, if\nthe method caused the insertion of an item into a\ncollection, the client has been notified of said insertion).\n\nIf the method fails, the `result` promise will be rejected\nwith the error returned by the server. The `updated`\npromise will be rejected as well (with nothing).\n\n------------------------------------------------------------\n\n###Asteroid.apply(method, params)\n\nSame as Asteroid.call, but using as array of parameters\ninstead of a list.\n\n#####Arguments\n\n* `method` **string** _required_: the name of the method to\n  call.\n\n* `params` **array** _optional_: an array of parameters that\n  will be passed to the method on the server.\n\n#####Returns\n\nSame as Asteroid.call, see above.\n\n------------------------------------------------------------\n\n###Asteroid.getCollection(name)\n\nCreates and returns a collection. If the collection already\nexists, nothing changes and the existing one is returned.\n\n#####Arguments\n\n* `name` **string** _required_: the name of the collection to\n  create.\n\n#####Returns\n\nA reference to the collection.\n\n#####Note\n\nAsteroid auto-creates collections for you. For example, if\nyou subscribe to an hypothetical `posts` subscription, the\nserver will start sending the client `added` messages that\nrefer to items of the `posts` collection. With Meteor's\nfront-end we would normally need to define the\n`posts`collection before we can access it.\n\nWith Asteroid, when the first `added` message is received,\nif the `posts` collection doesn't exist yet, it will get\nautomatically created. We can then get a reference to\nthat collection by calling `createCollection` (or by\naccessing the semi-private Asteroid.collections\ndictionary).\n\n\n\n##Asteroid.Collection methods\n\nAll the following methods use latency compensation.\n\n\n\n###Collection.insert(item)\n\nInserts an item into a collection. If the item does not\nhave an `_id` property, one will be automatically generated\nfor it.\n\n#####Arguments\n\n* `item` **object** _required_: the object to insert. Must\n  be JSON serializable. Optional support for EJSON is\n  planned.\n\n#####Returns\n\nAn object with two properties: `local` and `remote`. Both\nproperties are promises.\n\nThe local promise is immediately resolved with the `_id` of\nthe inserted item. That is, unless an error occurred. In\nthat case, an exception will be raised. (TODO: this is a bit\nof an API inconsistency which maybe should be fixed).\n\nThe remote promise is resolved with the `_id` of the\ninserted item if the remote insert is successful. Otherwise\nit's rejected with the reason of the failure.\n\n------------------------------------------------------------\n\n###Collection.update(id, item)\n\nUpdates the specified item.\n\n#####Arguments\n\n* `id` **string** _required_: the id of the item to update.\n\n* `item` **object** _required_: the object that will\n  replace the old one.\n\n#####Returns\n\nAn object with two properties: `local` and `remote`. Both\nproperties are promises.\n\nThe local promise is immediately resolved with the `_id` of\nthe updated item. That is, unless an error occurred. In\nthat case, an exception will be raised. (TODO: this is a bit\nof an API inconsistency which should be fixed).\n\nThe remote promise is resolved with the `_id` of the updated\nitem if the remote update is successful. Otherwise it's\nrejected with the reason of the failure.\n\n#####Note\n\n<span style=\"color:red;\">The API greatly differs from\nMeteor's API. Aligning the two is on the TODO list.</span>\n\n------------------------------------------------------------\n\n###Collection.remove(id)\n\nRemoves the specified item.\n\n#####Arguments\n\n* `id` **string** _required_: the id of the item to remove.\n\n#####Returns\n\nAn object with two properties: `local` and `remote`. Both\nproperties are promises.\n\nThe local promise is immediately resolved with the `_id` of\nthe removed item. That is, unless an error occurred. In\nthat case, an exception will be raised. (TODO: this is a bit\nof an API inconsistency which should be fixed).\n\nThe remote promise is resolved with the `_id` of the removed\nitem if the remote remove is successful. Otherwise it's\nrejected with the reason of the failure.\n\n------------------------------------------------------------\n\n###Collection.reactiveQuery(selector)\n\nGets a \"reactive\" subset of the collection.\n\n#####Arguments\n\n* `selector` **object or function** _required_: a\n  MongoDB-style selector. Actually for now only a simple\n  selector is supported (example `{key1: val1, key2.subkey1:\n  val2}`). To compensate for this, you can also pass in a\n  filter function which will be invoked on each item of the\n  collection. If the function returns a truthy value, the\n  item will be included, otherwise it will be left out.\n  Help on adding support for more complex selectors is\n  appreciated.\n\n#####Returns\n\nA ReactiveQuery instance.\n\n\n\n##ReactiveQuery methods and properties\n\n\n\n###ReactiveQuery.result\n\nThe array of items in the collection that matched the query.\n\n------------------------------------------------------------\n\n###ReactiveQuery.on(event, handler)\n\nRegisters a handler for an event.\n\n#####Arguments\n\n* `event` **string** _required_: the name of the event.\n\n* `handler` **function** _required_: the handler for the\n  event.\n\nPossible events are:\n\n* `change`: emitted whenever the result of the query\n  changes. The id of the item that changed is passed to the\n  handler.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mondora/asteroid.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test/asteroid.unit.js"
  },
  "version": "0.6.1"
}
